% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_stream.R
\name{fetch_stream}
\alias{fetch_stream}
\title{Fetch results via stream endpoint}
\usage{
fetch_stream(req, format = "tsv", parse = TRUE, path = NULL, verbosity = NULL)
}
\arguments{
\item{req}{\code{httr2_request} object, generated by e.g. \code{\link[httr2:request]{httr2::request()}} or
\code{\link[=uniprot_request]{uniprot_request()}}.}

\item{format}{\code{string}, data format to fetch. Can only be \code{"tsv"} at the
moment.}

\item{parse}{\code{logical}, should the response body be parsed e.g. into a \code{data.frame}
or should the \code{httr2_response} object be returned instead? Default is \code{TRUE}.
Does nothing if \code{path} is provided.}

\item{path}{Optional \code{string}, file path to save the results, e.g.
\code{"path/to/results.tsv"}}

\item{verbosity}{Optional \code{integer}, how much information to print? This is
a wrapper around \code{\link[httr2:req_verbose]{httr2::req_verbose()}} that uses an integer to control
verbosity:
\itemize{
\item 0: no output
\item 1: show headers
\item 2: show headers and bodies
\item 3: show headers, bodies, and curl status messages.
}

Use \code{\link[httr2:with_verbosity]{httr2::with_verbosity()}} to control the verbosity of requests that you
can't affect directly.}
}
\value{
By default, returns an object whose type depends on \code{format}:
\itemize{
\item \strong{tsv}: \code{data.frame}
}

If \code{parse = FALSE}, returns an \code{httr2_response}. If \code{path} is specified,
also returns an \code{httr2_response}, and saves the parsed results to
the file path indicated.
}
\description{
This functions performs a request for data from the UniProt REST
API, fetches the results using the stream endpoint, and saves them to a
file or into memory.

You likely won't use this function directly, but rather one of the
wrapper functions: \code{\link[=uniprot_map]{uniprot_map()}}, \code{\link[=uniprot_search]{uniprot_search()}}, or \code{\link[=uniprot_single]{uniprot_single()}}.
\subsection{Stream limitations}{
\enumerate{
\item The stream endpoint is expensive for the API to process. If this endpoint
gas too many requests a \code{429} status error will occur. In this case use
\code{fetch_paged()} or try \code{fetch_stream()} again later.
\item Up to 10,000,000 results can be fetched via stream. If you want to get
more results you should use \code{fetch_paged()}, or consider downloading
some datasets from UniProt's FTP website.
}
}
}
\examples{
\dontrun{
  req <- request("https://rest.uniprot.org/uniref/UniRef90_P99999.tsv")
  fetch_stream(req)
}
}
