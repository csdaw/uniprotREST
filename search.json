[{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/articles/uniprotREST.html","id":"id-mapping-with-uniprot_map","dir":"Articles","previous_headings":"","what":"1. ID mapping with uniprot_map","title":"Getting started with uniprotREST","text":"far frequently used tool. Say hypothetically, given list UniProt accessions. clue proteins refer , properties proteins . can use uniprot_map() find .","code":"# Accessions of interest aoi <- c(\"A0A8I6AN81\", \"A0A0N4SVP8\", \"Q9H6R0\")"},{"path":"/articles/uniprotREST.html","id":"default-settings","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map","what":"Default settings","title":"Getting started with uniprotREST","text":"just use default settings, map IDs UniProtKB_AC-ID UniProtKB, output dataframe. job ID automatically printed (stop printing setting verbosity argument 0). Job IDs job data kept UniProt approximately 7 days, deleted. default, output dataframe 8 columns: = accessions used map = accessions mapped Entry.Name = UniProtKB entry name Reviewed = protein Swiss-Prot? Protein.names = name protein UniProtKB Gene.Names = gene names associated protein (can multiple) Organism = name organism protein Length = amino acid length n rows depends : many ids successfully mapped mapping 1:1 output columns can customised fields argument.","code":"result1 <- uniprot_map(ids = aoi) ## Running job: aa29fe3eb9b54ec1e3bff6890465804ef3085fc6  ##   Downloading: page 1 of 1 # All 3 proteins are RNA helicases head(result1) ##         From      Entry       Entry.Name   Reviewed ## 1 A0A8I6AN81 A0A8I6AN81   A0A8I6AN81_RAT unreviewed ## 2 A0A0N4SVP8 A0A0N4SVP8 A0A0N4SVP8_MOUSE unreviewed ## 3     Q9H6R0     Q9H6R0      DHX33_HUMAN   reviewed ##                                                          Protein.names ## 1                                           RNA helicase (EC 3.6.4.13) ## 2                                           RNA helicase (EC 3.6.4.13) ## 3 ATP-dependent RNA helicase DHX33 (EC 3.6.4.13) (DEAH box protein 33) ##    Gene.Names                Organism Length ## 1  Rig1 Ddx58 Rattus norvegicus (Rat)    881 ## 2    Eif4a3l2    Mus musculus (Mouse)    411 ## 3 DHX33 DDX33    Homo sapiens (Human)    707"},{"path":"/articles/uniprotREST.html","id":"return-fields","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map","what":"Return fields","title":"Getting started with uniprotREST","text":"UniProt lot metadata available protein. can access results requesting different columns ‘return fields’ using fields argument. request different return fields. See X page list available fields.","code":"# Jobs are stored for 7 days so this time # it will be quicker! result2 <- uniprot_map(   ids = aoi,   fields = c(     \"gene_primary\",     \"organism_name\",     \"length\",     \"mass\"   ) ) ## Running job: aa29fe3eb9b54ec1e3bff6890465804ef3085fc6  ##   Downloading: page 1 of 1 head(result2) ##         From Gene.Names..primary.                Organism Length   Mass ## 1 A0A8I6AN81                 Rig1 Rattus norvegicus (Rat)    881 101151 ## 2 A0A0N4SVP8             Eif4a3l2    Mus musculus (Mouse)    411  46959 ## 3     Q9H6R0                DHX33    Homo sapiens (Human)    707  78874"},{"path":"/articles/uniprotREST.html","id":"fromto-database","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map","what":"From/to database","title":"Getting started with uniprotREST","text":"uniprot_map() can used map IDs databases UniProt IDs, vice-versa. See X page list databases available mapping, X page rules databases can mapped . ’ll map Ensembl gene IDs reviewed UniProtKB accessions. fields argument works mapping UniProtKB, UniRef, UniParc database.","code":"# Genes of interest goi <- c(\"ENSG00000088247\", \"ENSG00000162613\") result3 <- uniprot_map(   ids = goi,   from = \"Ensembl\",   to = \"UniProtKB-Swiss-Prot\",   fields = c(\"accession\", \"gene_primary\") ) ## Running job: 03772c110ee17372f3dc29049d1ff9fa50105fad  ##   Downloading: page 1 of 1 head(result3) ##              From  Entry Gene.Names..primary. ## 1 ENSG00000088247 Q92945                KHSRP ## 2 ENSG00000162613 Q96AE4                FUBP1"},{"path":"/articles/uniprotREST.html","id":"format","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map","what":"Format","title":"Getting started with uniprotREST","text":"UniProt REST API can deliver results different data formats. formats available depends database accessed uniprotREST function used. See X page full list available formats. uniprotREST wrapper functions support formats yet. tool currently supports following formats: uniprot_map() uniprot_search() = tsv, fasta uniprot_single() = tsv, fasta, json ’ll re-use result3 job , request FASTA protein sequences instead. Biostrings package installed (highly recommended) output Biostrings::AAStringSet, otherwise named character.","code":"result4 <- uniprot_map(   ids = goi,   from = \"Ensembl\",   to = \"UniProtKB-Swiss-Prot\",   format = \"fasta\" ) ## Running job: 03772c110ee17372f3dc29049d1ff9fa50105fad  ##   Downloading: page 1 of 1 result4 ## AAStringSet object of length 2: ##     width seq                                               names                ## [1]   711 MSDYSTGGPPPGPPPPAGGGGGA...YGQTPGPGGPQPPPTQQGQQQAQ sp|Q92945|FUBP2_H... ## [2]   644 MADYSTVPPPSSGSAGGGGGGGG...QAAYYAQTSPQGMPQHPPAPQGQ sp|Q96AE4|FUBP1_H..."},{"path":"/articles/uniprotREST.html","id":"path","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map","what":"Path","title":"Getting started with uniprotREST","text":"previous examples save data UniProt object memory. However, can also save data file disk. , just specify file path correct extension. file must already exist otherwise error thrown.","code":"# Get temp path for this example (and delete when done) tmp <- tempfile(fileext = \".tsv\") on.exit(unlink(tmp))  # Save results to a tsv file uniprot_map(   ids = goi,   from = \"Ensembl\",   to = \"UniProtKB-Swiss-Prot\",   fields = c(\"accession\", \"gene_primary\"),   format = \"tsv\",   path = tmp ) ## Running job: 03772c110ee17372f3dc29049d1ff9fa50105fad  ##   Downloading: page 1 of 1  # Check file contents read.delim(tmp) ##              From  Entry Gene.Names..primary. ## 1 ENSG00000088247 Q92945                KHSRP ## 2 ENSG00000162613 Q96AE4                FUBP1"},{"path":"/articles/uniprotREST.html","id":"other-arguments","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map","what":"Other arguments","title":"Getting started with uniprotREST","text":"arguments uniprot_map() follows:","code":""},{"path":"/articles/uniprotREST.html","id":"isoform","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map > Other arguments","what":"Isoform","title":"Getting started with uniprotREST","text":"default, UniProt APIs provide results proteins’ canonical sequence. set isoform = TRUE, isoform sequences included well. typically relevant format = \"fasta\" although run exceptions. get canonical isoform sequence human GAPDH.","code":"result5 <- uniprot_map(   ids = \"P04406\",   format = \"fasta\",   isoform = TRUE ) ## Running job: 8589ca2e878ae84053759d9161aabd9006a79c6d  ##   Downloading: page 1 of 1 result5 ## AAStringSet object of length 2: ##     width seq                                               names                ## [1]   335 MGKVKVGVNGFGRIGRLVTRAAF...WYDNEFGYSNRVVDLMAHMASKE sp|P04406|G3P_HUM... ## [2]   293 MVYMFQYDSTHGKFHGTVKAENG...WYDNEFGYSNRVVDLMAHMASKE sp|P04406-2|G3P_H..."},{"path":"/articles/uniprotREST.html","id":"method-and-page_size","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map > Other arguments","what":"Method and page_size","title":"Getting started with uniprotREST","text":"UniProt API provides results via 2 endpoints: stream, pagination, can choose via method argument. default, uniprot_map() uniprot_search() use method = \"paged\" robust slightly slower, default recommended page_size 500. Whereas uniprot_single() uses stream endpoint. Paged endpoint: Slightly slower. Processes results chunks, much reliable connection issues. Can theoretically handle 10,000,000 results. Stream endpoint: Slightly faster. Expensive API, uses lot memory. Can return 429 status error currently many requests. 10,000,000 results can fetched.","code":""},{"path":"/articles/uniprotREST.html","id":"compressed","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map > Other arguments","what":"Compressed","title":"Getting started with uniprotREST","text":"gzipped data requested? FALSE default, used method = \"stream\" path specified. example:","code":"# Get temp path for this example (and delete when done) tmp <- tempfile(fileext = \".fasta.gz\") on.exit(unlink(tmp))  # Save results to a tsv file uniprot_map(   ids = \"P04406\",   format = \"fasta\",   isoform = TRUE,   method = \"stream\",   path = tmp,   compressed = TRUE ) ## Running job: 8589ca2e878ae84053759d9161aabd9006a79c6d  ##  Downloading: 0 B      Downloading: 0 B      Downloading: 0 B      Downloading: 0 B      Downloading: 0 B      Downloading: 0 B      Downloading: 0 B      Downloading: 0 B      Downloading: 420 B      Downloading: 420 B      Downloading: 420 B      Downloading: 420 B  # Check file contents Biostrings::readAAStringSet(tmp) ## AAStringSet object of length 2: ##     width seq                                               names                ## [1]   335 MGKVKVGVNGFGRIGRLVTRAAF...WYDNEFGYSNRVVDLMAHMASKE sp|P04406|G3P_HUM... ## [2]   293 MVYMFQYDSTHGKFHGTVKAENG...WYDNEFGYSNRVVDLMAHMASKE sp|P04406-2|G3P_H..."},{"path":"/articles/uniprotREST.html","id":"verbosity","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map > Other arguments","what":"Verbosity","title":"Getting started with uniprotREST","text":"Controls amount information print: Use verbosity = 0 print anything. Use verbosity = 1, 2, 3 print increasing amounts information HTTP requests made UniProt API (typically debugging purposes).","code":""},{"path":"/articles/uniprotREST.html","id":"dry_run","dir":"Articles","previous_headings":"1. ID mapping with uniprot_map > Other arguments","what":"Dry_run","title":"Getting started with uniprotREST","text":"TRUE, performs request locally httr2::req_dry_run() instead actually sending UniProt REST API. useful debugging purposes getting 400 - Bad request status errors.","code":""},{"path":"/articles/uniprotREST.html","id":"querying-uniprot-with-uniprot_search","dir":"Articles","previous_headings":"","what":"2. Querying UniProt with uniprot_search","title":"Getting started with uniprotREST","text":"function used perform text searches UniProt, akin using search bar website. different databases available search bar also available via uniprot_search() (see page x). ’s important search string constructed correctly, see page help building queries. get 400 - Bad request error, likely search string formatted correctly. ’ll search human proteins annotated glycoprotein keyword, SwissProt .e. manually reviewed. UniProt databases UniProtKB available query well. example ’ll look reference proteomes word ‘dog’ title.","code":"result6 <- uniprot_search(   query = \"(proteome:UP000005640) AND (keyword:KW-0325) AND (length<100)\",   database = \"uniprotkb\",   format = \"tsv\",   fields = c(\"accession\", \"gene_primary\") ) ##   Downloading: page 1 of 1 head(result6) ##    Entry Gene.Names..primary. ## 1 P06028                 GYPB ## 2 P80098                 CCL7 ## 3 Q16627                CCL14 ## 4 P0DMC3                APELA ## 5 P25063                 CD24 ## 6 P31358                 CD52 result7 <- uniprot_search(   \"dog\",   database = \"proteomes\",   format = \"tsv\",   fields = c(\"upid\", \"organism\") ) ##   Downloading: page 1 of 1 head(result7) ##   Proteome.Id ## 1 UP000252519 ## 2 UP000645828 ## 3 UP000002254 ## 4 UP000029752 ## 5 UP000201396 ## 6 UP000792793 ##                                                                                            Organism ## 1                                                                Ancylostoma caninum (Dog hookworm) ## 2                                       Nyctereutes procyonoides (Raccoon dog) (Canis procyonoides) ## 3                                                   Canis lupus familiaris (Dog) (Canis familiaris) ## 4 Cadicivirus A (isolate Dog/Hong Kong/209/2008) (CaPdV-1) (Canine picodicistrovirus (isolate 209)) ## 5                                                                             Raccoon dog amdovirus ## 6                                               Lycaon pictus (African wild dog) (Cape hunting dog)"},{"path":"/articles/uniprotREST.html","id":"retrieving-an-entry-with-uniprot_single","dir":"Articles","previous_headings":"","what":"3. Retrieving an entry with uniprot_single","title":"Getting started with uniprotREST","text":"uniprot_single() used quickly retrieve information single entry UniProt. default json format requested parsed list contains information available particular entry. arguments work uniprot_search(). example: , UniProt databases available apart UniProtKB (see X page full list databases). example UniParc:","code":"result8 <- uniprot_single(   id = \"P99999\",   verbosity = 0 ) str(result8, max.level = 1) ## List of 17 ##  $ entryType               : chr \"UniProtKB reviewed (Swiss-Prot)\" ##  $ primaryAccession        : chr \"P99999\" ##  $ secondaryAccessions     :List of 6 ##  $ uniProtkbId             : chr \"CYC_HUMAN\" ##  $ entryAudit              :List of 5 ##  $ annotationScore         : num 5 ##  $ organism                :List of 4 ##  $ proteinExistence        : chr \"1: Evidence at protein level\" ##  $ proteinDescription      :List of 1 ##  $ genes                   :List of 1 ##  $ comments                :List of 10 ##  $ features                :List of 36 ##  $ keywords                :List of 14 ##  $ references              :List of 19 ##  $ uniProtKBCrossReferences:List of 178 ##  $ sequence                :List of 5 ##  $ extraAttributes         :List of 3 result9 <- uniprot_single(   id = \"UPI0001C61C61\",   database = \"uniparc\",   verbosity = 0 ) str(result9, max.level = 1) ## List of 6 ##  $ uniParcId                : chr \"UPI0001C61C61\" ##  $ uniParcCrossReferences   :List of 4 ##  $ sequence                 :List of 5 ##  $ sequenceFeatures         :List of 7 ##  $ oldestCrossRefCreated    : chr \"2010-03-03\" ##  $ mostRecentCrossRefUpdated: chr \"2022-12-14\""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlotte Dawson. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dawson C (2023). uniprotREST: R wrapper UniProt website REST API. R package version 0.0.0.9000.","code":"@Manual{,   title = {uniprotREST: R wrapper for the UniProt website REST API},   author = {Charlotte Dawson},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/code_of_conduct.html","id":null,"dir":"","previous_headings":"","what":"The Code Manifesto","title":"The Code Manifesto","text":"want work ecosystem empowers developers reach potential–one encourages growth effective collaboration. space safe . space benefits everyone participates . encourages new developers enter field. discussion collaboration grow, growth improve. effort create place, hold values: Discrimination limits us. includes discrimination basis race, gender, sexual orientation, gender identity, age, nationality, technology arbitrary exclusion group people. Boundaries honor us. comfort levels everyone’s comfort levels. Remember , brought attention, heed . biggest assets. None us born masters trade. us helped along way. Return favor, can. resources future. extension #3, share know. Make resource help come . Respect defines us. Treat others wish treated. Make discussions, criticisms debates position respectfulness. Ask , true? necessary? constructive? Anything less unacceptable. Reactions require grace. Angry responses valid, abusive language vindictive actions toxic. something happens offends , handle assertively, respectful. Escalate reasonably, try allow offender opportunity explain , possibly correct issue. Opinions just : opinions. every one us, due background upbringing, varying opinions. perfectly acceptable. Remember : respect opinions, respect opinions others. err human. might intend , mistakes happen contribute build experience. Tolerate honest mistakes, don’t hesitate apologize make one .","code":""},{"path":"/index.html","id":"uniprotrest","dir":"","previous_headings":"","what":"R wrapper for the UniProt website REST API","title":"R wrapper for the UniProt website REST API","text":"package provides R wrapper UniProt website REST API.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R wrapper for the UniProt website REST API","text":"Install latest development version GitHub:","code":"remotes::install_github(\"csdaw/uniprotREST\", build_vignettes = TRUE)"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"R wrapper for the UniProt website REST API","text":"Read full documentation .","code":""},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"R wrapper for the UniProt website REST API","text":"","code":"library(uniprotREST)"},{"path":"/index.html","id":"id-mapping-with-uniprot_map","dir":"","previous_headings":"Quick start","what":"ID mapping with uniprot_map()","title":"R wrapper for the UniProt website REST API","text":"Map /UniProt IDs. function wraps ID mapping API endpoint.","code":"# Proteins of interest (from 3 different taxa) ids <- c(\"P99999\", \"P12345\", \"P23456\")  # Get accessions, gene names and sequence lengths result <- uniprot_map(   ids = ids,    from = \"UniProtKB_AC-ID\",   to = \"UniProtKB\",   format = \"tsv\",   fields = c(\"accession\", \"gene_primary\", \"length\") ) ## Running job: fb7778b417ab8f889e11f4ffb4a602bf8fecef13  ##  Downloading: page 1 of 1 result ##     From  Entry Gene.Names..primary. Length ## 1 P99999 P99999                 CYCS    105 ## 2 P12345 P12345                 GOT2    430 ## 3 P23456 P23456                    L   2151"},{"path":"/index.html","id":"querying-uniprot-with-uniprot_search","dir":"","previous_headings":"Quick start","what":"Querying UniProt with uniprot_search()","title":"R wrapper for the UniProt website REST API","text":"Perform text searches UniProt databases. function wraps Query API endpoint.","code":"# Get human glycoproteins less than 100 amino acids long  result <- uniprot_search(   query = \"(proteome:UP000005640) AND (keyword:KW-0325) AND (length<100)\",   database = \"uniprotkb\",   format = \"tsv\",   fields = c(\"accession\", \"gene_primary\") ) ##  Downloading: page 1 of 1 head(result) ##    Entry Gene.Names..primary. ## 1 P06028                 GYPB ## 2 P80098                 CCL7 ## 3 Q16627                CCL14 ## 4 P0DMC3                APELA ## 5 P25063                 CD24 ## 6 P31358                 CD52"},{"path":"/index.html","id":"retrieving-an-entry-with-uniprot_single","dir":"","previous_headings":"Quick start","what":"Retrieving an entry with uniprot_single()","title":"R wrapper for the UniProt website REST API","text":"Download full entry single protein. function wraps Retrieve API endpoint.","code":"# Human cytochrome C result <- uniprot_single(   id = \"P99999\",   database = \"uniprotkb\",   format = \"json\",   verbosity = 0 )  str(result, max.level = 1) ## List of 17 ##  $ entryType               : chr \"UniProtKB reviewed (Swiss-Prot)\" ##  $ primaryAccession        : chr \"P99999\" ##  $ secondaryAccessions     :List of 6 ##  $ uniProtkbId             : chr \"CYC_HUMAN\" ##  $ entryAudit              :List of 5 ##  $ annotationScore         : num 5 ##  $ organism                :List of 4 ##  $ proteinExistence        : chr \"1: Evidence at protein level\" ##  $ proteinDescription      :List of 1 ##  $ genes                   :List of 1 ##  $ comments                :List of 10 ##  $ features                :List of 36 ##  $ keywords                :List of 14 ##  $ references              :List of 19 ##  $ uniProtKBCrossReferences:List of 179 ##  $ sequence                :List of 5 ##  $ extraAttributes         :List of 3"},{"path":"/index.html","id":"metadata","dir":"","previous_headings":"","what":"Metadata","title":"R wrapper for the UniProt website REST API","text":"Please report issues bugs ideally reproducible example project released Contributor Code Conduct. participating project agree abide terms. Author: Charlotte Dawson License: MIT","code":""},{"path":"/reference/fetch_paged.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch results via pagination — fetch_paged","title":"Fetch results via pagination — fetch_paged","text":"function performs request data UniProt REST API, fetches results using pagination, saves file memory. likely use function directly, rather one wrapper functions: uniprot_map(), uniprot_search(), uniprot_single().","code":""},{"path":"/reference/fetch_paged.html","id":"things-to-note-","dir":"Reference","previous_headings":"","what":"Things to note:","title":"Fetch results via pagination — fetch_paged","text":"pagination endpoint less expensive API infrastructure deal versus fetch_stream(), memory demand distributed longer period time. connection interrupted fetching results pagination, request current page needs reattempted. stream endpoint, entire request needs completely restarted.","code":""},{"path":"/reference/fetch_paged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch results via pagination — fetch_paged","text":"","code":"fetch_paged(req, n_pages, format = \"tsv\", path = NULL, verbosity = NULL)"},{"path":"/reference/fetch_paged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch results via pagination — fetch_paged","text":"req httr2_request object, generated e.g. httr2::request() uniprot_request(). n_pages integer, number pages fetched. can calculated dividing number total results page size e.g. resp$headers$x-total-results / page_size. format string, data format fetch. Can one \"tsv\", \"fasta\". path string (optional), file path save results, e.g. \"path//results.tsv\". file must already exist, otherwise error thrown. verbosity integer (optional), much information print? 0: output NULL (default): minimal output 1: show request headers 2: show request headers bodies 3: show request headers, bodies, curl status messages","code":""},{"path":"/reference/fetch_paged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch results via pagination — fetch_paged","text":"default, returns object whose type depends format: tsv: data.frame json: list fasta: Biostrings::AAStringSet (named character Biostrings installed) parse = FALSE, returns httr2_response. path specified, saves parsed results file path indicated, returns NULL invisibly.","code":""},{"path":"/reference/fetch_paged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch results via pagination — fetch_paged","text":"","code":"if (FALSE) {   req <- uniprot_request(     \"https://rest.uniprot.org/uniref/search\",     query = \"P99999\",     format = \"tsv\",     fields = \"id,name,count\",     size = 1   )    fetch_paged(req, n_pages = 3) }"},{"path":"/reference/fetch_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch results via stream — fetch_stream","title":"Fetch results via stream — fetch_stream","text":"function performs request data UniProt REST API, fetches results using stream endpoint, saves file memory. likely use function directly, rather one wrapper functions: uniprot_map(), uniprot_search(), uniprot_single().","code":""},{"path":"/reference/fetch_stream.html","id":"things-to-note-","dir":"Reference","previous_headings":"","what":"Things to note:","title":"Fetch results via stream — fetch_stream","text":"stream endpoint expensive API process. endpoint many requests 429 status error occur. case use fetch_paged() try later. 10,000,000 results can fetched via stream. want get results use fetch_paged(), consider downloading datasets UniProt's FTP website.","code":""},{"path":"/reference/fetch_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch results via stream — fetch_stream","text":"","code":"fetch_stream(req, format = \"tsv\", parse = TRUE, path = NULL, verbosity = NULL)"},{"path":"/reference/fetch_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch results via stream — fetch_stream","text":"req httr2_request object, generated e.g. httr2::request() uniprot_request(). format string, data format fetch. Can one \"tsv\", \"json\" \"fasta\". parse logical, response body parsed e.g. data.frame httr2_response object returned instead? Default TRUE. nothing path provided. path string (optional), file path save results, e.g. \"path//results.tsv\". file must already exist, otherwise error thrown. verbosity integer (optional), much information print? 0: output NULL (default): minimal output 1: show request headers 2: show request headers bodies 3: show request headers, bodies, curl status messages","code":""},{"path":"/reference/fetch_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch results via stream — fetch_stream","text":"default, returns object whose type depends format: tsv: data.frame json: list fasta: Biostrings::AAStringSet (named character Biostrings installed) parse = FALSE, returns httr2_response. path specified, saves parsed results file path indicated, returns NULL invisibly.","code":""},{"path":"/reference/fetch_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch results via stream — fetch_stream","text":"","code":"if (FALSE) {   req <- uniprot_request(     \"https://rest.uniprot.org/uniref/stream\",     query = \"P99999\",     format = \"tsv\",     fields = \"id,name,count\"   )    fetch_stream(req) }"},{"path":"/reference/formats.html","id":null,"dir":"Reference","previous_headings":"","what":"(Dataset) UniProt download formats — formats","title":"(Dataset) UniProt download formats — formats","text":"dataframe contains available download file types .e. values format UniProt database. See Examples use object","code":""},{"path":"/reference/formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Dataset) UniProt download formats — formats","text":"","code":"formats"},{"path":"/reference/formats.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"(Dataset) UniProt download formats — formats","text":"object class data.frame 43 rows 3 columns.","code":""},{"path":"/reference/formats.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"(Dataset) UniProt download formats — formats","text":"UniProtKB download formats determined hand querying REST API database unavailable format (usually txt) determining allowed formats resulting error response.","code":""},{"path":"/reference/formats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Dataset) UniProt download formats — formats","text":"Columns:","code":""},{"path":[]},{"path":"/reference/formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Dataset) UniProt download formats — formats","text":"","code":"# What UniProt databases are available to query? levels(formats$database)[1:12] #>  [1] \"uniprotkb\" \"uniref\"    \"uniparc\"   \"proteomes\" \"taxonomy\"  \"keywords\"  #>  [7] \"citations\" \"diseases\"  \"database\"  \"locations\" \"unirule\"   \"arba\"       # What formats are available for querying the `proteomes` database, # using `uniprot_search()` formats[formats$database == \"proteomes\" & formats$func == \"search\", \"format\"] #> [1] \"tsv\""},{"path":"/reference/from_to_dbs.html","id":null,"dir":"Reference","previous_headings":"","what":"(Dataset) From/to databases for ID mapping — from_to_dbs","title":"(Dataset) From/to databases for ID mapping — from_to_dbs","text":"dataframe contains details databases can mapped /uniprot_map(). See from_to_rules rules database identifiers can mapped databases.","code":""},{"path":"/reference/from_to_dbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Dataset) From/to databases for ID mapping — from_to_dbs","text":"","code":"from_to_dbs"},{"path":"/reference/from_to_dbs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"(Dataset) From/to databases for ID mapping — from_to_dbs","text":"object class data.frame 100 rows 5 columns.","code":""},{"path":"/reference/from_to_dbs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"(Dataset) From/to databases for ID mapping — from_to_dbs","text":"/pairs downloaded according \"Valid databases pairs\" section UniProt ID Mapping page.","code":""},{"path":"/reference/from_to_dbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Dataset) From/to databases for ID mapping — from_to_dbs","text":"Columns:","code":""},{"path":[]},{"path":"/reference/from_to_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"(Dataset) From/to rules for ID mapping — from_to_rules","title":"(Dataset) From/to rules for ID mapping — from_to_rules","text":"list contains valid /pairings can used uniprot_map(). See Examples use object. Also see from_to_dbs information database.","code":""},{"path":"/reference/from_to_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Dataset) From/to rules for ID mapping — from_to_rules","text":"","code":"from_to_rules"},{"path":"/reference/from_to_rules.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"(Dataset) From/to rules for ID mapping — from_to_rules","text":"object class list length 98.","code":""},{"path":"/reference/from_to_rules.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"(Dataset) From/to rules for ID mapping — from_to_rules","text":"/pairs downloaded according \"Valid databases pairs\" section UniProt ID Mapping page.","code":""},{"path":[]},{"path":"/reference/from_to_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Dataset) From/to rules for ID mapping — from_to_rules","text":"","code":"# Show valid `from` values names(from_to_rules) #>  [1] \"Allergome\"                     \"ArachnoServer\"                 #>  [3] \"Araport\"                       \"BioCyc\"                        #>  [5] \"BioGRID\"                       \"BioMuta\"                       #>  [7] \"CCDS\"                          \"CGD\"                           #>  [9] \"ChEMBL\"                        \"ChiTaRS\"                       #> [11] \"CLAE\"                          \"CollecTF\"                      #> [13] \"ComplexPortal\"                 \"ConoServer\"                    #> [15] \"CPTAC\"                         \"CRC64\"                         #> [17] \"dictyBase\"                     \"DIP\"                           #> [19] \"DisProt\"                       \"DMDM\"                          #> [21] \"DNASU\"                         \"DrugBank\"                      #> [23] \"EchoBASE\"                      \"eggNOG\"                        #> [25] \"EMBL-GenBank-DDBJ\"             \"EMBL-GenBank-DDBJ_CDS\"         #> [27] \"Ensembl\"                       \"Ensembl_Genomes\"               #> [29] \"Ensembl_Genomes_Protein\"       \"Ensembl_Genomes_Transcript\"    #> [31] \"Ensembl_Protein\"               \"Ensembl_Transcript\"            #> [33] \"ESTHER\"                        \"euHCVdb\"                       #> [35] \"FlyBase\"                       \"Gene_Name\"                     #> [37] \"GeneCards\"                     \"GeneID\"                        #> [39] \"GeneReviews\"                   \"GeneTree\"                      #> [41] \"GeneWiki\"                      \"GenomeRNAi\"                    #> [43] \"GI_number\"                     \"GlyConnect\"                    #> [45] \"GuidetoPHARMACOLOGY\"           \"HGNC\"                          #> [47] \"HOGENOM\"                       \"IDEAL\"                         #> [49] \"KEGG\"                          \"LegioList\"                     #> [51] \"Leproma\"                       \"MaizeGDB\"                      #> [53] \"MEROPS\"                        \"MGI\"                           #> [55] \"MIM\"                           \"neXtProt\"                      #> [57] \"OMA\"                           \"OpenTargets\"                   #> [59] \"Orphanet\"                      \"OrthoDB\"                       #> [61] \"PATRIC\"                        \"PDB\"                           #> [63] \"PeroxiBase\"                    \"PharmGKB\"                      #> [65] \"PHI-base\"                      \"PIR\"                           #> [67] \"PlantReactome\"                 \"PomBase\"                       #> [69] \"ProteomicsDB\"                  \"PseudoCAP\"                     #> [71] \"Reactome\"                      \"REBASE\"                        #> [73] \"RefSeq_Nucleotide\"             \"RefSeq_Protein\"                #> [75] \"RGD\"                           \"SGD\"                           #> [77] \"STRING\"                        \"SwissLipids\"                   #> [79] \"TCDB\"                          \"TreeFam\"                       #> [81] \"TubercuList\"                   \"UCSC\"                          #> [83] \"UniParc\"                       \"UniPathway\"                    #> [85] \"UniProtKB_AC-ID\"               \"UniRef100\"                     #> [87] \"UniRef50\"                      \"UniRef90\"                      #> [89] \"VEuPathDB\"                     \"VGNC\"                          #> [91] \"WBParaSite\"                    \"WBParaSite_Transcript-Protein\" #> [93] \"World-2DPAGE\"                  \"WormBase\"                      #> [95] \"WormBase_Protein\"              \"WormBase_Transcript\"           #> [97] \"Xenbase\"                       \"ZFIN\"                           # Show valid `to` values for a given `from` e.g. SGD from_to_rules[[\"SGD\"]] #> [1] \"UniProtKB\"            \"UniProtKB-Swiss-Prot\""},{"path":"/reference/resp_body_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract FASTA data from response body — resp_body_fasta","title":"Extract FASTA data from response body — resp_body_fasta","text":"function gets FASTA data httr2_response either saves file parses memory Biostrings::AAStringSet named character vector.","code":""},{"path":"/reference/resp_body_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract FASTA data from response body — resp_body_fasta","text":"","code":"resp_body_fasta(resp, con = NULL, encoding = NULL)"},{"path":"/reference/resp_body_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract FASTA data from response body — resp_body_fasta","text":"resp httr2_response object, generated e.g. httr2::req_perform() fetch_stream()/fetch_paged(). con string base::connection object (optional), file save data. encoding string (optional), character encoding body text. specified, use encoding specified content-type, falling back \"UTF8\" warning found. resulting string always re-encoded UTF-8.","code":""},{"path":"/reference/resp_body_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract FASTA data from response body — resp_body_fasta","text":"default, returns Biostrings::AAStringSet object. Biostrings package installed, returns named character vector. con NULL, returns nothing saves FASTA sequences file specified con.","code":""},{"path":"/reference/resp_body_fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract FASTA data from response body — resp_body_fasta","text":"","code":"resp <- structure(   list(method = \"GET\", url = \"https://example.com\",        body = charToRaw(\">Protein1\\nAAA\\n>Protein2\\nCCC\")),   class = \"httr2_response\" )  resp_body_fasta(resp) #> AAStringSet object of length 2: #>     width seq                                               names                #> [1]     3 AAA                                               Protein1 #> [2]     3 CCC                                               Protein2"},{"path":"/reference/resp_body_tsv.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract tab-delimited data from response body — resp_body_tsv","title":"Extract tab-delimited data from response body — resp_body_tsv","text":"function gets tab-delimited data httr2_response either saves file parses data.frame memory.","code":""},{"path":"/reference/resp_body_tsv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract tab-delimited data from response body — resp_body_tsv","text":"","code":"resp_body_tsv(resp, page = NULL, con = NULL, encoding = NULL)"},{"path":"/reference/resp_body_tsv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract tab-delimited data from response body — resp_body_tsv","text":"resp httr2_response object, generated e.g. httr2::req_perform() fetch_stream()/fetch_paged(). page integer (optional), response page number. page > 1 table header removed saving file. used con specified. con string base::connection object (optional), file save data. encoding string (optional), character encoding body text. specified, use encoding specified content-type, falling back \"UTF8\" warning found. resulting string always re-encoded UTF-8.","code":""},{"path":"/reference/resp_body_tsv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract tab-delimited data from response body — resp_body_tsv","text":"default, returns data.frame. con NULL, returns nothing saves tab-delimited text file specified con.","code":""},{"path":"/reference/resp_body_tsv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract tab-delimited data from response body — resp_body_tsv","text":"","code":"resp <- structure(   list(method = \"GET\", url = \"https://example.com\",        body = charToRaw(\"Entry\\tGene Names (primary)\\nP99999\\tCYCS\\n\")),   class = \"httr2_response\" )  resp_body_tsv(resp) #>    Entry Gene.Names..primary. #> 1 P99999                 CYCS"},{"path":"/reference/return_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"(Dataset) UniProt return fields — return_fields","title":"(Dataset) UniProt return fields — return_fields","text":"dataframe contains valid fields (.e. columns) data can request UniProt. strings field column use functions package. See Examples use object.","code":""},{"path":"/reference/return_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Dataset) UniProt return fields — return_fields","text":"","code":"return_fields"},{"path":"/reference/return_fields.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"(Dataset) UniProt return fields — return_fields","text":"object class data.frame 391 rows 4 columns.","code":""},{"path":"/reference/return_fields.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"(Dataset) UniProt return fields — return_fields","text":"UniProtKB return fields scraped UniProtKB return fields page. return fields Uniprot databases determined hand using Web Developer Tools (F12) inspect GET request made searching different database UniProt website.","code":""},{"path":"/reference/return_fields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Dataset) UniProt return fields — return_fields","text":"Columns:","code":""},{"path":[]},{"path":"/reference/return_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Dataset) UniProt return fields — return_fields","text":"","code":"# What UniProt databases are available to query? levels(return_fields$database) #> [1] \"uniprotkb\" \"uniref\"    \"uniparc\"   \"proteomes\" \"taxonomy\"  \"keywords\"  #> [7] \"citations\" \"diseases\"  \"locations\"  # What fields are available for the `proteomes` database? return_fields[return_fields$database == \"proteomes\", \"field\"] #>  [1] \"upid\"                  \"organism\"              \"organism_id\"           #>  [4] \"components\"            \"mnemonic\"              \"lineage\"               #>  [7] \"busco\"                 \"cpd\"                   \"genome_assembly\"       #> [10] \"genome_representation\" \"protein_count\""},{"path":"/reference/uniprotREST-package.html","id":null,"dir":"Reference","previous_headings":"","what":"uniprotREST: R wrapper for the UniProt website REST API — uniprotREST-package","title":"uniprotREST: R wrapper for the UniProt website REST API — uniprotREST-package","text":"Simple functions access UniProt website REST API. Wraps httr2 functions easily map IDs query available databases.","code":""},{"path":"/reference/uniprotREST-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"uniprotREST: R wrapper for the UniProt website REST API — uniprotREST-package","text":"Maintainer: Charlotte Dawson csdaw@outlook.com (ORCID)","code":""},{"path":"/reference/uniprot_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Map from/to UniProt IDs — uniprot_map","title":"Map from/to UniProt IDs — uniprot_map","text":"function wraps UniProt ID Mapping service maps identifiers used one database, identifiers another. default maps UniProtKB accessions UniProt, returns data.frame metadata mapped protein accessions. can also map IDs /databases e.g. = \"Ensembl\", = \"UniProtKB\".","code":""},{"path":"/reference/uniprot_map.html","id":"things-to-note","dir":"Reference","previous_headings":"","what":"Things to note","title":"Map from/to UniProt IDs — uniprot_map","text":"service limits number IDs allowed. large mapping requests likely fail. Try split queries smaller chunks case problems. 100,000 = maximum number input ids allowed 500,000 = maximum number entries output","code":""},{"path":"/reference/uniprot_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map from/to UniProt IDs — uniprot_map","text":"","code":"uniprot_map(   ids,   from = \"UniProtKB_AC-ID\",   to = \"UniProtKB\",   format = \"tsv\",   path = NULL,   fields = NULL,   isoform = NULL,   method = \"paged\",   page_size = 500,   compressed = NULL,   verbosity = NULL,   dry_run = FALSE )"},{"path":"/reference/uniprot_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map from/to UniProt IDs — uniprot_map","text":"ids character, vector identifiers map . contain duplicates. Maximum length = 100,000 ids. string, database map . Default \"UniProtKB_AC-ID\". See from_to_dbs possible databases whose identifiers can map . string, database map . Default \"UniProtKB\". See from_to_rules possible databases can map , depending database. format string, data format fetch. Default \"tsv\". Can one \"tsv\" \"fasta\". path string (optional), file path save results, e.g. \"path//results.tsv\". fields character (optional), fields (.e. columns) data get. used UniProtKB, UniRef, UniParc database. See return_fields available fields. isoform logical (optional), protein isoforms included results? necessarily relevant formats databases. method string, download method use. Either \"paged\" (default) \"stream\". Paged robust connection issues takes less memory. Stream may faster, uses memory sensitive connection issues. page_size integer (optional), many entries per page request? relevant method = \"paged\". best leave 500. compressed logical (optional), gzipped data requested? relevant method = \"stream\" path specified. verbosity integer (optional), much information print? 0: output NULL (default): minimal output 1: show request headers 2: show request headers bodies 3: show request headers, bodies, curl status messages dry_run logical, perform request httr2::req_dry_run()? Requires httpuv package installed. Default FALSE.","code":""},{"path":"/reference/uniprot_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map from/to UniProt IDs — uniprot_map","text":"default, returns object whose type depends format: tsv: data.frame fasta: Biostrings::AAStringSet (named character Biostrings installed) path specified, saves results file path indicated, returns NULL invisibly. dry_run = TRUE, returns list containing information request, including request method, path, headers.","code":""},{"path":[]},{"path":"/reference/uniprot_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map from/to UniProt IDs — uniprot_map","text":"","code":"if (FALSE) {   # Default, get info about UniProt IDs   uniprot_map(     \"P99999\",     format = \"tsv\",     fields = c(\"accession\", \"gene_primary\", \"feature_count\")   )    # Other common use, mapping other IDs to UniProt   # (or vice-versa)   uniprot_map(     c(\"ENSG00000088247\", \"ENSG00000162613\"),     from = \"Ensembl\",     to = \"UniProtKB\"   )  }"},{"path":"/reference/uniprot_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a UniProt HTTP request — uniprot_request","title":"Create a UniProt HTTP request — uniprot_request","text":"function creates httr2::request object. likely use function directly, rather one wrapper functions: uniprot_map(), uniprot_search(), uniprot_single().","code":""},{"path":"/reference/uniprot_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a UniProt HTTP request — uniprot_request","text":"","code":"uniprot_request(url, method = \"GET\", ..., max_tries = 5, rate = 1/1)"},{"path":"/reference/uniprot_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a UniProt HTTP request — uniprot_request","text":"url string, URL make request. method string, HTTP request method. One \"GET\" (default), \"POST\", \"HEAD\". ... Name-value pairs provide query parameters. value must either length-1 atomic vector (automatically escaped) NULL (silently dropped). max_tries integer, number maximum attempts perform HTTP request. Default 5. rate numeric, maximum number requests per second. Default 1 / 1 .e. 1 request per 1 second.","code":""},{"path":"/reference/uniprot_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a UniProt HTTP request — uniprot_request","text":"Returns httr2_request object, (essentially list).","code":""},{"path":"/reference/uniprot_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a UniProt HTTP request — uniprot_request","text":"","code":"# Construct a request for the accession and # gene name for human Cytochrome C uniprot_request(   url = \"https://rest.uniprot.org/uniprotkb/P99999\",   fields = \"accession,gene_primary\",   format = \"tsv\" ) #> <httr2_request> #> GET #> https://rest.uniprot.org/uniprotkb/P99999?fields=accession%2Cgene_primary&format=tsv #> Body: empty #> Options: #> • useragent: 'https://github.com/csdaw/uniprotREST' #> Policies: #> • retry_max_tries: 5 #> • throttle_delay: a function"},{"path":"/reference/uniprot_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search UniProt — uniprot_search","title":"Search UniProt — uniprot_search","text":"Search Uniprot via REST API. default searches supplied query UniProtKB returns data.frame matching proteins. wrapper UniProt API endpoint.","code":""},{"path":"/reference/uniprot_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search UniProt — uniprot_search","text":"","code":"uniprot_search(   query,   database = \"uniprotkb\",   format = \"tsv\",   path = NULL,   fields = NULL,   isoform = NULL,   method = \"paged\",   page_size = 500,   compressed = NULL,   verbosity = NULL,   dry_run = FALSE )"},{"path":"/reference/uniprot_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search UniProt — uniprot_search","text":"query string, search query. See page helping constructing search queries. database string, database look . Default \"uniprotkb\". See Databases section available databases. format string, data format fetch. Default \"tsv\". Can one \"tsv\" \"fasta\". path string (optional), file path save results, e.g. \"path//results.tsv\". fields character (optional), fields (.e. columns) data get. fields available depends database used, see return_fields available fields. isoform logical (optional), protein isoforms included results? necessarily relevant formats databases. method string, download method use. Either \"paged\" (default) \"stream\". Paged robust connection issues takes less memory. Stream may faster, uses memory sensitive connection issues. page_size integer (optional), many entries per page request? relevant method = \"paged\". best leave 500. compressed logical (optional), gzipped data requested? relevant method = \"stream\" path specified. verbosity integer (optional), much information print? 0: output NULL (default): minimal output 1: show request headers 2: show request headers bodies 3: show request headers, bodies, curl status messages dry_run logical, perform request httr2::req_dry_run()? Requires httpuv package installed. Default FALSE.","code":""},{"path":"/reference/uniprot_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search UniProt — uniprot_search","text":"default, returns object whose type depends format: tsv: data.frame fasta: Biostrings::AAStringSet (named character Biostrings installed) path specified, saves results file path indicated, returns NULL invisibly. dry_run = TRUE, returns list containing information request, including request method, path, headers.","code":""},{"path":"/reference/uniprot_search.html","id":"databases","dir":"Reference","previous_headings":"","what":"Databases","title":"Search UniProt — uniprot_search","text":"following databases available query: uniprotkb: UniProt Knowledge Base uniref: UniProt Reference Clusters uniparc: UniProt Archive proteomes: Reference proteomes taxonomy: Taxonomy keywords: Keywords citations: Literature references diseases: Disease queries database: Cross references locations: Subcellular location unirule: UniRule arba: ARBA (Association-Rule-Based Annotator)","code":""},{"path":[]},{"path":"/reference/uniprot_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search UniProt — uniprot_search","text":"","code":"if (FALSE) {   # Search for all human glycoproteins from SwissProt   res <- uniprot_search(     query = \"(proteome:UP000005640) AND (keyword:KW-0325) AND (reviewed:true)\",     database = \"uniprotkb\",     format = \"tsv\",     fields = c(\"accession\", \"gene_primary\", \"feature_count\")   )    # Look at the resulting dataframe   head(res) }"},{"path":"/reference/uniprot_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a single UniProt entry — uniprot_single","title":"Download a single UniProt entry — uniprot_single","text":"Get single entry UniProt. default fetches webpage using format = \"json\" outputs list information, different formats available different databases. wrapper UniProt API endpoint.","code":""},{"path":"/reference/uniprot_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a single UniProt entry — uniprot_single","text":"","code":"uniprot_single(   id,   database = \"uniprotkb\",   format = \"json\",   path = NULL,   fields = NULL,   isoform = NULL,   verbosity = NULL,   dry_run = FALSE )"},{"path":"/reference/uniprot_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a single UniProt entry — uniprot_single","text":"id string, entry ID. Form depends database e.g. \"P12345\" UniProtKB, \"UPI0000128BBF\" UniParc, etc. database string, database look . Default \"uniprotkb\". See Databases section available databases. format string, data format fetch. Default \"json\". Can one \"tsv\", \"json\", \"fasta\". path string (optional), file path save results, e.g. \"path//results.tsv\". fields character (optional), fields (.e. columns) data get. fields available depends database used, see return_fields available fields. isoform logical (optional), protein isoforms included results? necessarily relevant formats databases. verbosity integer (optional), much information print? 0: output NULL (default): minimal output 1: show request headers 2: show request headers bodies 3: show request headers, bodies, curl status messages dry_run logical, perform request httr2::req_dry_run()? Requires httpuv package installed. Default FALSE.","code":""},{"path":"/reference/uniprot_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a single UniProt entry — uniprot_single","text":"default, returns object whose type depends format: tsv: data.frame json: list fasta: Biostrings::AAStringSet (named character Biostrings installed) path specified, saves results file path indicated, returns NULL invisibly. dry_run = TRUE, returns list containing information request, including request method, path, headers.","code":""},{"path":"/reference/uniprot_single.html","id":"databases","dir":"Reference","previous_headings":"","what":"Databases","title":"Download a single UniProt entry — uniprot_single","text":"following databases available query: uniprotkb: UniProt Knowledge Base uniref: UniProt Reference Clusters uniparc: UniProt Archive proteomes: Reference proteomes taxonomy: Taxonomy keywords: Keywords citations: Literature references diseases: Disease queries database: Cross references locations: Subcellular location unirule: UniRule arba: ARBA (Association-Rule-Based Annotator)","code":""},{"path":[]},{"path":"/reference/uniprot_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a single UniProt entry — uniprot_single","text":"","code":"if (FALSE) {   # Download the entry for human Cytochrome C   res <- uniprot_single(\"P99999\", format = \"json\")    # Look at the structure of the resulting list   str(res, max.level = 1) }"},{"path":"/news/index.html","id":"version-0009000","dir":"Changelog","previous_headings":"","what":"Version 0.0.0.9000","title":"Version 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
