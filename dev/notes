## ID mapping

Using the beta web app, use the ID mapper. Then click on the 'Download' button.
Then click on 'generate URL for API'. This gives 2 ways to obtain the results
which you should put into the function. This sort of helps explain the two
ways of downloading results described in this page https://beta.uniprot.org/help/id_mapping.

Also see more info about the paginated results here https://beta.uniprot.org/help/pagination

TO: UniProt.
 - Valid formats = fasta, fasta (isoforms), tsv, xlsx, json, xml, rdf, txt, gff, list
 - Valid fields (tsv/xlsx only)

TO: UniParc.
 - Valid formats = fasta, tsv, xslx, json, xml, rdf, list.
 - Valid fields (tsv/xslx only)

TO: UniRef
 - Valid formats = fasta, tsv, json, xlsx, list
 - Valid fields (tsv, xlsx only)

## Functions

Main 3:
 1. uniprot_retrieve()
 2. uniprot_search()
 3. uniprot_map()

Accessory:
 - get_return_fields(database = c("uniprotkb", "uniparc", "uniref", "crossref"))?
   output is a data.frame
 - get_query_fields()
   output is a data.frame
 - get_from_to(from = NULL, to = NULL)
     - if no input is given then output a named list of from-to mappings
     - if otherwise one should be a string
     - if both are a string then error and tell people to use check_from_to()?
     Or just use check_from_to and output TRUE or FALSE (a bit complicated..)
 - check_from_to(from, to)
     - given a pair of from and to strings, check if they are okay i.e. output is a logical

## Datasets

 - from_to = data.frame of id mapping databases (maybe change name of this to `map_dbs` or equivalent)
 and then have `from_to` be the list object instead of `from_to_list`
 - return_fields = list of data.frames of valid column fields
 - query_fields = data.frame of valid query fields



